#:kivy 2.0.0
#Make sure that you don't use assignment opperatos in kivy language but use ':' instead of '='

<LoginScreen>:
    GridLayout:
    #This GridLayout will be the main window which will have one column and will be contain 2 GridLayouts:
    # 1: A GridLayout containing the username-password "window"
    # 2: The one where the message will be shown
        cols: 1
        GridLayout: #GridLayout with 1 default column. Will be used for user and pass
            cols: 1
            padding: 15, 15 #Space from margin to widgets
            spacing: 20, 20 #Space between widgetsdig
            Label: #Widget
                font_size: "20sp" #sp=space-independent pixels"
                text: "User Login"
            TextInput:  #Widget
                id: username
                hint_text: "Username"
            TextInput:  #Widget
                id: password
                password: True #text input is treated as password
                hint_text: "Password"
            #Add this relative layout to update the size and "position" of Login button. 
            #If the button was the child of the GridLayout then the size_hint values would be realtive to the main grid
            #Having the RelativeLayout added and the button as its child will update the size and position of the button relative to the RelativeLayout
            RelativeLayout: 
                Button:
                    text: "Login"
                    on_press: root.login(root.ids.username.text, root.ids.password.text)
                    size_hint: "0.3", "0.5" #30%V, 50%H
                    pos_hint: {'center_x': 0.5, 'center_y': 0.6 }
            Label:
                id: login_wrong
                text: ""
        GridLayout: #GL with 2 columns. Will be used for message
            cols: 2
            size_hint: 0.2, 0.2
            padding: 10, 10
            spacing: 10, 10
            Button:
                text: "Forgot Password ?"
                background_color: 1, 1, 1, 0 #RGB format=> 1Red 1Green 1Blue 0Transparency
                opacity: 1 if self.state == 'normal' else 0.5
                color: 0.1, 0.7, 1, 1 #RGB format=> 0.1Red 0.7Green 0.1Blue 1Transparency
                on_press: root.forgot_password()
            Button:
                text: "Sign Up"
                background_color: 1, 1, 1, 0 #RGB format=> 1Red 1Green 1Blue 0Transparency
                opacity: 1 if self.state == 'normal' else 0.5
                color: 0.1, 0.7, 1, 1 #RGB format=> 0.1Red 0.7Green 0.1Blue 1Transparency
                on_press: root.sign_up()
                #root is a special name used insidea kivi file.
                #The root refers to the class of the rule widget.
                #The rule widget in here is LogiScreen which is connected to the LoginScreen class

<SignUpScreen>:
    GridLayout:
        cols: 1
        padding: 20, 20
        spacing: 20, 20
        Label:
            text: "Sign up for a space journey!"
        TextInput:
            id: username
            hint_text: "Username"
        TextInput:
            id: password
            hint_text: "Password"
        Button:
            text: "Submit"
            on_press: root.add_user(root.ids.username.text, root.ids.password.text)

<SignUpScreenSuccess>:
    GridLayout:
        cols: 1
        Label:
            text: "Sign up successful !"
        Button:
            text: "Login page"
            on_press: root.login_page()

<LoginScreenSuccess>:
    GridLayout:
        cols: 1
        padding: 30, 30
        spacing: 30, 30
        RelativeLayout:
            ImageButton:
                on_press: root.log_out()
                source: 'logout_hover.png' if self.hovered else 'logout_nothover.png'
                size_hint: 0.35, 0.35
                pos_hint: {'center_x': 0.93, 'center_y': 0.8 }
        Label:
            text: "How do you feel ?"
        TextInput:
            id: feeling
            hint_text: "Things to try: happy, sad, unloved, alone..."
        Button:
            text: "Enlighten me"
            on_press: root.get_quote(root.ids.feeling.text)
        ScrollView:
            Label:
                id: quote
                text: ""
                text_size: self.width, None
                size_hint_y: None
                height: self.texture_size[1] #Dynamic value.texture_size is a tuple which contains the width and height of the text. In this row we access the second element of the tuple->H

<ForgotPasswordScreen>:
    GridLayout:
        cols:1
        padding: 20, 20
        spacing: 20, 20
        RelativeLayout:
            TextInput:
                id: user_name
                hint_text: "Enter your username"
                size_hint: 1, 0.3
                pos_hint: {'center_x': 0.5, 'center_y': 0.5 }
        RelativeLayout:
            Button:
                text: "Recover password"
                size_hint: 0.3, 0.3
                pos_hint: {'center_x': 0.5, 'center_y': 0.7 }
                on_press: root.recover_password(root.ids.user_name.text)
        Label:
            id: recovered_password
            text: ""
            background_color: 1, 0, 0, 1 #RGB format=> 1Red 1Green 1Blue 0Transparency
            color: 0.1, 0.7, 1, 1
            font_size: "30sp"

<RootWidget>: #Keeps records of all the screens of the app
    LoginScreen:
        name: "login_screen" #this name will be used in the python logic
    SignUpScreen:
        name: "sign_up_screen" #this name will be used in the python logic
    SignUpScreenSuccess:
        name: "sign_up_screen_success" #this name will be used in the python logic
    LoginScreenSuccess:
        name: "login_screen_success" #this name will be used in the python logic
    ForgotPasswordScreen:
        name: "forgot_password_screen" #this name will be used in the python logic